AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Cluster in a new VPC

Parameters:
  VpcCidr:
    Description: CIDR Range for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/(16|24))
  PublicSubnetOneCidr:
    Description: CIDR Range for public subnet one
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)
  PublicSubnetTwoCidr:
    Description: CIDR Range for public subnet two
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)
  PrivateSubnetOneCidr:
    Description: CIDR Range for private subnet one
    Type: String
    Default: 10.0.3.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)
  PrivateSubnetTwoCidr:
    Description: CIDR Range for private subnet two
    Type: String
    Default: 10.0.4.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !Ref PublicSubnetOneCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "public-1"
        - Key: subnet-type
          Value: "Public"

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !Ref PublicSubnetTwoCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "public-2"
        - Key: subnet-type
          Value: "Public"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "public-routetable"

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetTwo

  PublicInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "internet-gateway"

  PublicInternetGatewayAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "PublicInternetGateway"

  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: PublicInternetGateway

  PublicEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "nat-gw-eip"

  PublicNatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - PublicEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetOne
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "nat-gw"

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !Ref PrivateSubnetOneCidr
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "private-1"
        - Key: subnet-type
          Value: "Private"

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !Ref PrivateSubnetTwoCidr
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "private-2"
        - Key: subnet-type
          Value: "Private"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Sub "${AWS::StackName}"
              - "private-routetable"

  PrivateSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: PublicNatGW

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetOne

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetTwo

  # Security Group for Demo
  DemoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Access to Web Port from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC

  # Application Load Balancer
  DemoLoadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Type: "network"
      Scheme: "internet-facing"
      # SecurityGroups:
      #   - !Ref DemoSecurityGroup
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", [!Sub "${AWS::StackName}", "cluster"]]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 2

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/ResourceGroupsandTagEditorFullAccess"

  # ECSTaskExecutionRolePolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: ECSTaskExecutionRolePolicy
  #     Roles:
  #       - Ref: ECSTaskExecutionRole
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Action:
  #             - cloudformation:*
  #             - ecs:ListAccountSettings
  #             - ecs:CreateCluster
  #             - ecs:CreateService
  #             - ecs:DeleteCluster
  #             - ecs:DeleteService
  #             - ecs:DeregisterTaskDefinition
  #             - ecs:DescribeClusters
  #             - ecs:DescribeServices
  #             - ecs:DescribeTasks
  #             - ecs:ListTasks
  #             - ec2:ModifyNetworkInterfaceAttribute
  #             - ecs:RegisterTaskDefinition
  #             - ecs:UpdateService
  #             - ec2:AuthorizeSecurityGroupIngress
  #             - ec2:DescribeAvailabilityZones
  #             - ec2:DescribeVpcs
  #             - ec2:DescribeVpcAttribute
  #             - ec2:DescribeSubnets
  #             - ec2:DescribeRouteTables
  #             - ec2:DescribeNetworkInterfaceAttribute
  #             - ec2:DescribeNetworkInterfaces
  #             - ec2:DeleteNetworkInterface
  #             - ec2:CreateSecurityGroup
  #             - ec2:CreateTags
  #             - ec2:DeleteTags
  #             - ec2:CreateNetworkInterface
  #             - ec2:DescribeSecurityGroups
  #             - ec2:DeleteSecurityGroup
  #             - ec2:RevokeSecurityGroupIngress
  #             - elasticfilesystem:CreateAccessPoint
  #             - elasticfilesystem:CreateFileSystem
  #             - elasticfilesystem:CreateMountTarget
  #             - elasticfilesystem:DeleteAccessPoint
  #             - elasticfilesystem:DeleteFileSystem
  #             - elasticfilesystem:DeleteMountTarget
  #             - elasticfilesystem:DescribeAccessPoints
  #             - elasticfilesystem:DescribeBackupPolicy
  #             - elasticfilesystem:DescribeFileSystemPolicy
  #             - elasticfilesystem:DescribeFileSystems
  #             - elasticfilesystem:DescribeLifecycleConfiguration
  #             - elasticfilesystem:DescribeMountTargets
  #             - elasticfilesystem:ModifyMountTarget
  #             - elasticfilesystem:ModifyMountTargetSecurityGroups
  #             - iam:AttachRolePolicy
  #             - iam:CreateRole
  #             - iam:DeleteRole
  #             - iam:DeleteRolePolicy
  #             - iam:DetachRolePolicy
  #             - iam:PassRole
  #             - iam:PutRolePolicy
  #             - elasticloadbalancing:*
  #             - application-autoscaling:*
  #             - servicediscovery:*
  #             - logs:CreateLogGroup
  #             - logs:DescribeLogGroups
  #             - logs:FilterLogEvents
  #             - logs:DeleteLogGroup
  #             - route53:CreateHostedZone
  #             - route53:DeleteHostedZone
  #             - route53:GetHealthCheck
  #             - route53:GetHostedZone
  #             - route53:ListHostedZonesByName
  #           Effect: Allow
  #           Resource:
  #             - "*"
# Action: ["ec2:CreateTags", "ec2:DeleteTags"]
# These output values will be available to service templates to use.
Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref "VPC"
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref "ECSCluster"
  LoadbalancerId:
    Description: The Demo App Loadbalancer Arn
    Value: !Ref "DemoLoadbalancer"
  LoadbalancerEndpoint:
    Description: The Demo App Loadbalancer Endpoint
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt "DemoLoadbalancer.DNSName"
